name: Build Windows EXE

on:
  push:
    tags:
      - "v*"
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows-exe:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive version from ref
        shell: bash
        id: ver
        run: |
          REF="${GITHUB_REF_NAME}"
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VER="${REF#v}"
          else
            VER="0.0.0+${GITHUB_RUN_NUMBER}"
          fi
          echo "VER=$VER" >> $GITHUB_ENV
          echo "version=$VER" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # === ВОТ ЭТО ВЕРНУЛ ===
      - name: Download FFmpeg (BtbN)
        shell: pwsh
        run: |
          $url = 'https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-win64-gpl-shared.zip'
          Invoke-WebRequest -Uri $url -OutFile ffmpeg.zip -UseBasicParsing
          Expand-Archive ffmpeg.zip -DestinationPath "$env:RUNNER_TEMP\ffmpeg" -Force
          # Найти bin с ffmpeg.exe
          $ffmpegExe = Get-ChildItem "$env:RUNNER_TEMP\ffmpeg" -Recurse -Filter ffmpeg.exe | Select-Object -First 1
          if (-not $ffmpegExe) { throw "ffmpeg.exe not found after extraction" }
          $ffBin = Split-Path $ffmpegExe.FullName -Parent
          # Добавить в PATH на раннере
          Add-Content $env:GITHUB_PATH $ffBin
          Write-Host "FFmpeg bin: $ffBin"

      - name: Build binary (PyInstaller)
        shell: pwsh
        run: |
          pyinstaller `
            --noconfirm `
            --onefile `
            --name RUBookmateDownloader `
            --hidden-import httpx `
            --hidden-import PIL `
            --hidden-import ebooklib `
            --hidden-import bs4 `
            --hidden-import lxml `
            RUBookmatedownloader.py

          # Определить dist-папку
          $distDir = (Get-ChildItem dist -Directory | Select-Object -First 1).FullName
          if (-not $distDir) { $distDir = "dist" }
          echo "DIST=$distDir" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Bundle FFmpeg next to EXE
        shell: pwsh
        run: |
          $distDir = "$env:DIST"
          $ffmpegExe = Get-ChildItem "$env:RUNNER_TEMP\ffmpeg" -Recurse -Filter ffmpeg.exe | Select-Object -First 1
          $ffprobeExe = Get-ChildItem "$env:RUNNER_TEMP\ffmpeg" -Recurse -Filter ffprobe.exe | Select-Object -First 1
          $ffplayExe  = Get-ChildItem "$env:RUNNER_TEMP\ffmpeg" -Recurse -Filter ffplay.exe  | Select-Object -First 1
          if ($ffmpegExe) { Copy-Item $ffmpegExe.FullName -Destination $distDir -Force }
          if ($ffprobeExe){ Copy-Item $ffprobeExe.FullName -Destination $distDir -Force }
          if ($ffplayExe) { Copy-Item $ffplayExe.FullName  -Destination $distDir -Force }

      - name: Create release zip
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path release -Force | Out-Null
          $zipPath = "release/RUBookmateDownloader-win64.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Add-Type -AssemblyName 'System.IO.Compression.FileSystem'
          [System.IO.Compression.ZipFile]::CreateFromDirectory($env:DIST, $zipPath)
          Write-Host "ZIP created: $zipPath"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: RUBookmateDownloader-win64
          path: release/RUBookmateDownloader-win64.zip

      - name: Publish GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/RUBookmateDownloader-win64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
