name: Build Windows EXE

on:
  push:
    tags:
      - "v*"
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows-exe:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build EXE with PyInstaller
        shell: pwsh
        run: |
          # Clean previous builds if any
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist)  { Remove-Item -Recurse -Force dist }

          # Build one-file EXE
          pyinstaller `
            --noconfirm `
            --onefile `
            --name RUBookmateDownloader `
            --add-data "requirements.txt;." `
            --hidden-import httpx `
            --hidden-import PIL `
            --hidden-import ebooklib `
            --hidden-import bs4 `
            --hidden-import lxml `
            RUBookmatedownloader.py

          # Determine output dist subfolder dynamically (PyInstaller creates dist/<name> or dist with single EXE)
          $distDir = (Get-ChildItem dist -Directory | Select-Object -First 1).FullName
          if (-not $distDir) { $distDir = "dist" }
          echo "DISTDIR=$distDir" >> $env:GITHUB_ENV

      - name: Download FFmpeg (BtbN prebuilt)
        shell: pwsh
        run: |
          $ffUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-win64-gpl-shared.zip"
          $tmp    = "$env:RUNNER_TEMP"
          $zip    = Join-Path $tmp "ffmpeg.zip"
          $outDir = Join-Path $tmp "ffmpeg"
          Invoke-WebRequest -Uri $ffUrl -OutFile $zip -UseBasicParsing
          if (Test-Path $outDir) { Remove-Item -Recurse -Force $outDir }
          Expand-Archive -Path $zip -DestinationPath $outDir -Force

          # Find /bin with ffmpeg.exe
          $binDir = Get-ChildItem $outDir -Recurse -Directory | Where-Object { Test-Path (Join-Path $_.FullName "ffmpeg.exe") } | Select-Object -First 1
          if (-not $binDir) { Write-Error "ffmpeg.exe not found after extraction"; exit 1 }

          $distDir = $env:DISTDIR
          if (-not (Test-Path $distDir)) { New-Item -ItemType Directory -Force -Path $distDir | Out-Null }

          Copy-Item (Join-Path $binDir.FullName "*") -Destination $distDir -Recurse -Force
          Get-ChildItem $distDir -Filter "ff*.exe" | ForEach-Object { Write-Host "Bundled $($_.Name)" }

      - name: Prepare release folder
        shell: pwsh
        run: |
          $distDir = $env:DISTDIR
          $releaseDir = "release\RUBookmateDownloader-win64"
          New-Item -ItemType Directory -Force -Path $releaseDir | Out-Null

          # Copy main EXE and bundled tools
          Copy-Item (Join-Path $distDir "RUBookmateDownloader.exe") $releaseDir -Force
          if (Test-Path (Join-Path $distDir "ffmpeg.exe"))  { Copy-Item (Join-Path $distDir "ffmpeg.exe")  $releaseDir -Force }
          if (Test-Path (Join-Path $distDir "ffprobe.exe")) { Copy-Item (Join-Path $distDir "ffprobe.exe") $releaseDir -Force }
          if (Test-Path (Join-Path $distDir "ffplay.exe"))  { Copy-Item (Join-Path $distDir "ffplay.exe")  $releaseDir -Force }

          # Optional: include README and license if present
          if (Test-Path README.md) { Copy-Item README.md $releaseDir -Force }
          if (Test-Path LICENSE)   { Copy-Item LICENSE   $releaseDir -Force }

          # Also drop a version file
          # (Get-Date).ToString("yyyy-MM-dd HH:mm:ss") | Out-File -Encoding utf8 (Join-Path $releaseDir "build_info.txt")

      - name: Zip release
        shell: pwsh
        run: |
          $zipPath = "release\RUBookmateDownloader-win64.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "release\RUBookmateDownloader-win64\*" -DestinationPath $zipPath -Force
          echo "ZIP=$zipPath" >> $env:GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: RUBookmateDownloader-win64
          path: release/RUBookmateDownloader-win64.zip

      - name: Publish GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/RUBookmateDownloader-win64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
