name: Build & Release (Windows, no external actions)

on:
  push:
    branches: [ main ]            # build & release on every push to main
  workflow_dispatch:              # manual runs as well

permissions:
  contents: write                 # required for pushing tags & creating releases

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh

jobs:
  build_release_windows:
    runs-on: windows-latest
    env:
      PYTHON_VERSION: '3.13'      # Python 3.13 as requested
      FFMPEG_ZIP_URL: 'https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-win64-gpl-shared.zip'
      APP_ENTRY: 'RUBookmatedownloader.py'       # change if your entry point differs
      APP_NAME: 'RUBookmateDownloader'           # exe name
    steps:
      - name: Show runner info
        run: |
          $PSVersionTable
          git --version
          python --version
          py --list

      - name: Manual checkout (no actions/checkout)
        run: |
          $ErrorActionPreference = 'Stop'
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $uri = "https://x-access-token:$token@github.com/$repo.git"
          $wd = "$env:GITHUB_WORKSPACE"
          Write-Host "Cloning $repo into $wd ..."
          git config --global --add safe.directory $wd
          git clone --no-checkout $uri $wd
          Set-Location $wd
          git checkout $env:GITHUB_SHA
          git fetch --tags --force --prune
          git submodule update --init --recursive
          git status --short --branch

      - name: Select Python 3.13 (fail if missing)
        id: py
        run: |
          $ErrorActionPreference = 'Stop'
          try {
            $py = (py -3.13 -c "import sys;print(sys.executable)")
          } catch {
            throw "Python 3.13 not available on this runner."
          }
          if (-not $py) { throw "Python 3.13 not available on this runner." }
          Write-Host "Using Python at: $py"
          echo "PYEXE=$py" >> $env:GITHUB_ENV
          & $py -V

      - name: Upgrade pip and install build deps
        run: |
          & "$env:PYEXE" -m pip install --upgrade pip wheel
          if (Test-Path "requirements.txt") {
            & "$env:PYEXE" -m pip install -r requirements.txt
          }
          & "$env:PYEXE" -m pip install pyinstaller

      - name: Download FFmpeg (prebuilt from BtbN, no build)
        run: |
          $zipUrl = $env:FFMPEG_ZIP_URL
          $out = "$env:RUNNER_TEMP\ffmpeg.zip"
          Write-Host "Downloading FFmpeg from $zipUrl ..."
          Invoke-WebRequest -Uri $zipUrl -OutFile $out -UseBasicParsing
          $dest = "$env:RUNNER_TEMP\ffmpeg"
          if (Test-Path $dest) { Remove-Item $dest -Recurse -Force }
          Expand-Archive -Path $out -DestinationPath $dest
          $exe = Get-ChildItem -Path $dest -Recurse -Filter ffmpeg.exe | Select-Object -First 1
          if (-not $exe) { throw "FFmpeg ffmpeg.exe not found after extraction" }
          $bin = Split-Path -Path $exe.FullName -Parent
          # Export clean path for subsequent steps
          $clean = (Resolve-Path $bin).Path
          Write-Host "FFmpeg bin: $clean"
          echo "FFMPEG_BIN=$clean" >> $env:GITHUB_ENV
          # Append to PATH for later steps
          $clean | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build Windows executable (PyInstaller)
        run: |
          $ErrorActionPreference = 'Stop'
          $entry = $env:APP_ENTRY
          if (-not (Test-Path $entry)) { throw "Entry file not found: $entry" }
          & "$env:PYEXE" -m PyInstaller `
            --noconfirm `
            --onefile `
            --name "$($env:APP_NAME)" `
            "$entry"
          Get-ChildItem -Recurse -Force dist,build | Format-List -Property FullName,Length

      - name: Prepare bundle (include FFmpeg)
        run: |
          $bundleRoot = Join-Path $env:GITHUB_WORKSPACE "release"
          $bundleDir = Join-Path $bundleRoot "$($env:APP_NAME)-win64"
          if (Test-Path $bundleDir) { Remove-Item $bundleDir -Recurse -Force }
          New-Item -ItemType Directory -Force -Path $bundleDir | Out-Null

          Copy-Item "dist\${env:APP_NAME}.exe" $bundleDir -Force
          if (Test-Path "README.md") { Copy-Item "README.md" $bundleDir -Force }
          if (Test-Path "LICENSE")  { Copy-Item "LICENSE"  $bundleDir -Force }

          # copy ffmpeg binaries (exe + dlls) using exported path
          if (-not $env:FFMPEG_BIN) { throw "FFMPEG_BIN env var not set" }
          Copy-Item "$env:FFMPEG_BIN\*" $bundleDir -Recurse -Force

          # make ZIP
          New-Item -ItemType Directory -Force -Path $bundleRoot | Out-Null
          $zipPath = Join-Path $bundleRoot "$($env:APP_NAME)-win64.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$bundleDir\*" -DestinationPath $zipPath
          Write-Host "ZIP ready: $zipPath"
          echo "ZIP_PATH=$zipPath" >> $env:GITHUB_ENV

      - name: Compute & push next SemVer tag
        run: |
          $ErrorActionPreference = 'Stop'
          git config user.email "actions@users.noreply.github.com"
          git config user.name  "github-actions[bot]"

          $latest = (git tag --list "v*" | Sort-Object {
              try { [version]($_ -replace '^[vV]','') } catch { [version]'0.0.0' }
            } -Descending | Select-Object -First 1)

          if (-not $latest) { $latest = "v0.0.0" }
          $ver = [version]($latest -replace '^[vV]','')
          $newTag = "v{0}.{1}.{2}" -f $ver.Major, $ver.Minor, ($ver.Build + 1)
          echo "NEW_TAG=$newTag" >> $env:GITHUB_ENV

          git tag -a $newTag -m "chore: release $newTag"
          git push origin $newTag
          Write-Host "Bumped and pushed tag $newTag"

      - name: Create GitHub Release & upload asset (gh CLI)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh --version
          gh release create "$env:NEW_TAG" "$env:ZIP_PATH" --title "Release $env:NEW_TAG" --generate-notes
          Write-Host "Release $env:NEW_TAG created with asset $env:ZIP_PATH"